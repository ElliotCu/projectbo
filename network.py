# -*- coding: Utf-8 -*
# Author: aurelien.esnard@u-bordeaux.fr

from model import *
import socket
import select
import pickle

#importation useful for viewig map
#dont delete the following section
from view import *
from keyboard import *
import sys
import pygame
################################################################################
#                          NETWORK SERVER CONTROLLER                           #
################################################################################

class NetworkServerController:

    def __init__(self, model, port):
        self.model = model
        self.port = port
        #initialize the socket connection
        self.s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 0)
        print ("Socket created")
        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.s.bind(('',port))
        print ("Socket binded")
        self.s.listen(5)
        #Empty client list
        self.client = []
        
        

    def send_map(self, conn):
        send_map = pickle.dumps(self.model.map)
        conn.sendall(send_map)
        ack = conn.recv(1024)


    def send_fruits(self, conn):
        send_fruits = pickle.dumps(self.model.fruits)
        conn.sendall(send_fruits)
        ack = conn.recv(1024)        

    def send_player(self, conn):
        player_to_send = self.model.player
        send_pl = pickle.dumps(player_to_send)
        conn.sendall(send_pl)
        ack = conn.recv(1024)

    def send_characters(self, conn):
        send_character = pickle.dumps(self.model.characters)
        conn.sendall(send_character)
        ack = conn.recv(1024)

    def send_bomb(self, conn):
        send_bomb = pickle.dumps(self.model.bombs)
        conn.sendall(send_bomb)
        ack = conn.recv(1024)

    def send_model(self, conn):
        self.send_map(conn)   #this function load the map and send it to the client
        print("map was send successfully")
        self.send_fruits(conn)
        print("Fruits were sent successfully")
        self.send_player(conn)
        print("player is received successfully")
        self.send_characters(conn)
        print("Characters were sent successfully")
        self.send_bomb(conn)
        print("Bombs were sent successfully")

    def receive_map(self, conn):
        the_map = conn.recv(4096)  #receiving the correct map
        map_complete = pickle.loads(the_map)
        print("map well received!")
        conn.send(b"ACK")          #ack confrimation 
        self.model.map = map_complete            #Load the map

    def receive_fruits(self, conn):
        fruits = conn.recv(4096)
        map_fruits = pickle.loads(fruits)
        conn.send(b"ACK")          #ack to confirm receiving fruits
        self.model.fruits = map_fruits   #load fruits generated by server
        print("fruits well received!")
            
    def receive_characters(self, conn):
        characters = conn.recv(4096)
        map_characters = pickle.loads(characters)
        conn.send(b"ACK")                   #ack to confirm receiving characters
        self.model.characters = map_characters   #load characters generated by server
        print("Characters well received!")

    def receive_bomb(self, conn):
        bombs = conn.recv(4096)
        map_bombs = pickle.loads(bombs)
        conn.send(b"ACK")
        self.model.bombs = map_bombs
        print("Bombs well received!")

    def receive_player(self, conn):
        new_player = conn.recv(4096)
        map_player = pickle.loads(new_player)
        conn.send(b"ACK")                       #ack to confirm receiving player
        self.model.player = map_player
        if map_player  not in self.model.characters :
            self.model.characters.append(map_player)

    def add_player_to_game(self, conn):
        playername = conn.recv(1024)
        nickname = playername.decode()
        print("nickname of player received : {}".format(nickname))
        conn.send(b"ACK")
        self.model.add_character(nickname, True)
        print("nickname of player added : {}".format(self.model.player.nickname))
        
    def receive_model(self, conn):
        self.receive_map(conn)   
        print("map was received successfully")
        self.receive_fruits(conn)
        print("Fruits were received successfully")
        self.receive_player(conn)
        print("player was received successfully")
        self.receive_characters(conn)
        print("Characters were received successfully")
        self.receive_bomb(conn)
        print("Bombs were received successfully")

    def client_connection_part(self, conn):
        part = conn.recv(1024)
        print("connection part : {}".format(part.decode()))
        conn.send(b"ACK")
        return part.decode()
            
    # time event        
    def tick(self, dt):
        (ready_to_read,_,_) = select.select(self.client+[self.s], [], [])
        for sock in ready_to_read:
            if sock == self.s and ready_to_read:
                conn, addr = self.s.accept()
                print("{} connected".format(addr))
                '''if self.client_connection_part(conn) == "init" :
                print("executing init section")'''
                #part 0 : receive the player corresponding to the current client
                self.add_player_to_game(conn)
                print("player was added successfully")
                #part 1 : sending model to work with 
                self.send_model(conn)
                print("initialised map sent successfully")
                '''elif self.client_connection_part(conn) == "tick" :
                print("executing tick section")'''
                #part 2 : receiving events and modifying the model
                '''self.receive_model(conn)'''
                print("new model was received successfully")
                #part 3 : view the model on the serveur for verification purposes
                view = GraphicView(self.model, "network map") #dont delete this line
                view.tick(dt) #dont delete this line
                print("netwok map printed")
        return True

################################################################################
#                          NETWORK CLIENT CONTROLLER                           #
################################################################################

class NetworkClientController:

    def __init__(self, model, host, port, nickname):
        self.model = model
        self.host = host
        self.port = port
        self.nickname = nickname
        #connecting to the game server
        self.sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 0)
        self.sock.connect((host, port))
        print("Connected to the game server")
        print("Host: {} Port: {}".format(self.host, self.port))

        '''#sending in wich part of code my programme in running
        self.sock.sendall(b"init")
        ack = self.sock.recv(1024)
        print("excution part well sent!")'''
        
        #send player
        print(" the players nickname is {} == {}".format(nickname, self.nickname))
        self.sock.sendall( self.nickname.encode() )
        ack = self.sock.recv(1024)
        print("player well sent!")

        #receive the map
        the_map = self.sock.recv(4096)  #receiving the correct map
        map_complete = pickle.loads(the_map)
        print("map well received!")
        self.sock.send(b"ACK")          #ack confrimation 
        self.model.map = map_complete            #Load the map

        #receiving fruits
        fruits = self.sock.recv(4096)
        map_fruits = pickle.loads(fruits)
        self.sock.send(b"ACK")          #ack to confirm receiving fruits
        self.model.fruits = map_fruits   #load fruits generated by server
        print("fruits well received!")

        #receiving player
        new_player = self.sock.recv(4096)
        map_player = pickle.loads(new_player)
        self.sock.send(b"ACK")                       #ack to confirm receiving player
        self.model.player = map_player

        #receiving characters
        characters = self.sock.recv(4096)
        map_characters = pickle.loads(characters)
        self.sock.send(b"ACK")                   #ack to confirm receiving characters
        self.model.characters = map_characters   #load characters generated by server
        print("Characters well received!")

        #receive bombsnb_clients_attendu
        bombs = self.sock.recv(4096)
        map_bombs = pickle.loads(bombs)
        self.sock.send(b"ACK")
        self.model.bombs = map_bombs
        print("Bombs well received!")

    
    # keyboard events

    def keyboard_quit(self):
        print("=> event \"quit\"")
        return False

    def keyboard_move_character(self, direction): #Floki:I completed this function from bomber.py
        print("=> event \"keyboard move direction\" {}".format(DIRECTIONS_STR[direction]))
        nickname = self.model.player.nickname
        if direction in DIRECTIONS:
            self.model.move_character(nickname, direction)
        # ...
        return True

    def keyboard_drop_bomb(self):               #Floki:I completed this function from bomber.py
        print("=> event \"keyboard drop bomb\"")
        nickname = self.model.player.nickname
        self.model.drop_bomb(nickname)
        # ...
        return True

    #useful fonctions
    def send_map(self, conn):
        send_map = pickle.dumps(self.model.map)
        conn.sendall(send_map)
        ack = conn.recv(1024)

    def send_fruits(self, conn):
        send_fruits = pickle.dumps(self.model.fruits)
        conn.sendall(send_fruits)
        ack = conn.recv(1024)

    def send_player(self, conn):
        send_player = self.model.player
        send_pl = pickle.dumps(send_player)
        self.sock.sendall(send_pl)
        ack = self.sock.recv(1024)
            
    def send_characters(self, conn):
        send_character = pickle.dumps(self.model.characters)
        conn.sendall(send_character)
        ack = conn.recv(1024)

    def send_bomb(self, conn):
        send_bomb = pickle.dumps(self.model.bombs)
        conn.sendall(send_bomb)
        ack = conn.recv(1024)

    def send_model(self, conn):
        self.send_map(conn)   #this function load the map and send it to the client
        print("map was send successfully")
        self.send_fruits(conn)
        print("Fruits were sent successfully")
        self.send_player(conn)
        print("player was sent successfully")
        self.send_characters(conn)
        print("Characters were sent successfully")
        self.send_bomb(conn)
        print("Bombs were sent successfully")

    def connection_in_init(self, conn):
        conn.sendall(b"init")
        ack = conn.recv(1024)

    def connection_in_tick(self, conn):
        conn.sendall(b"tick")
        ack = conn.recv(1024)
    
    # time event

    def tick(self, dt):
        '''self.connection_in_tick(self.sock)
        print("excution part well sent!")
        #part 1 : sending model (we cant tell if it was modified or not by a keyboard event)
        self.send_model(self.sock)'''
        #part 2 : receving the new modified model by the server
        '''code'''
        return True
